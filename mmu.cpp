#include "mmu.h"
#include "ppu.h"
#include "register.h"
#include "handler.h"
#include <stdio.h>
#include <iostream>

MMU::MMU(Handler& hand) : memory{}, handler(hand), bootROM{
        0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
        0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
        0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
        0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
        0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
        0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
        0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
        0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
        0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
        0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
        0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
        0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
        0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
        0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
        0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x00, 0x00, 0x23, 0x7D, 0xFE, 0x34, 0x20,
        0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x00, 0x00, 0x3E, 0x01, 0xE0, 0x50
    }
{
    std::fill(memory, memory+sizeof(memory), 0);
} 

void MMU::init() {
    dmaCycles = 0;
    dots = 0;
    IME = 0;
    using_bootROM = true;
    memory[0x9800 + 4*0x20 + 20] = 10;
}

uint8_t MMU::loadWord(uint16_t addr) { 
    if (using_bootROM && addr<0x100)
        return bootROM[addr];
    if (addr >= 0xff00 && addr <= 0xff7f) {
        return handler.ppu.getRegister(addr-0xff00);
    }

    return memory[addr];
}
void MMU::storeWord(uint16_t addr, uint8_t val) {
    if (addr == 0xff46)
        initDMA(val);
    if (addr == 0xff40 && ~val&0x80)
        fprintf(stderr, "turned off lcd\n");
    else if (addr == 0xff50) 
        using_bootROM = false;

    if (addr == 0xFF02 && val == 0x81) {
        std::cout << loadWord(0xFF01);
    }
    if (addr >= 0xff00 && addr <= 0xff7f) {
        handler.ppu.setRegister(addr-0xff00, val);
        return;
    }
    if (addr >= 0x9800 && addr <= 0x9bff)
        fprintf(stderr, "wrote to tilemap\n");
    
    memory[addr] = val;

}
void MMU::initDMA(uint8_t val) {
    dmaCycles = 0x9f;
    dmaStart = val<<8;
    dots = 0;
}

void MMU::tick() {
    if (dmaCycles) {
        storeWord( 0xfe9f-dmaCycles, loadWord(dmaStart + 0x9f - dmaCycles));
        dmaCycles--;
    }
    //printf("%x, %x\n", memory[0xff44], handler.ppu.getRegister(0x44));
    dots += 4;
    if (dots >= 456 ) {
        dots = 0;
        if (memory[0xff44]++ >= 153)
            memory[0xff44] = 0;
    }
}

void MMU::loadROM(char* str) {
    FILE* fp = fopen(str, "rb");
    uint8_t* p = (uint8_t*)memory;
    while (fread(p++, sizeof(uint8_t), 1,fp));
    
    fclose(fp);  


}

